akka {
  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {

    journal.plugin = "akka.persistence.cassandra.journal"
    journal.auto-start-journals = ["akka.persistence.cassandra.journal"]
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
    journal {
      tables-autocreate = true
      keyspace-autocreate = true
      replication-factor = 1
      keyspace = "organizationservice"

      # Dispatcher for the plugin actor
      plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
    }

    cassandra {
      events-by-tag {
        bucket-size = "Day"
        eventual-consistency-delay = 2s
        flush-interval = 50ms
        pubsub-notification = on
        first-time-bucket = "20200815T00:00"
      }

      query {
        refresh-interval = 2s
      }

      journal {
        tables-autocreate = true
        keyspace-autocreate = true
        replication-factor = 1
        keyspace = "organizationservice"

          # Dispatcher for the plugin actor
        plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
      }

      snapshot {
        tables-autocreate = true
        keyspace-autocreate = true
        replication-factor = 1
        keyspace = "organizationservice"
      }
    }
  }

}

datastax-java-driver {
  advanced.reconnect-on-init = on
  basic.contact-points = ["127.0.0.1:9042"]
  basic.load-balancing-policy.local-datacenter = "datacenter1"
}


akka.projection {
  cassandra.offset-store.keyspace = "organizationservice"
  # use same Cassandra session config as for the journal
  cassandra.session-config-path = "akka.persistence.cassandra"
}



akka.management {
  health-checks {
    readiness-checks {
      akka-persistence-cassandra = "akka.persistence.cassandra.healthcheck.CassandraHealthCheck"
    }
  }
}
