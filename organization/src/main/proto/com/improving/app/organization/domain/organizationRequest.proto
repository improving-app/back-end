syntax = "proto3";
package com.improving.app.organization.domain;

import "scalapb/scalapb.proto";
import "scalapb/validate.proto";

import "com/improving/app/common/domain/ids.proto";
import "com/improving/app/organization/domain/organizationTypeDefinitions.proto";
import "validate/validate.proto";

option (scalapb.options) = {
  scope: FILE
  [scalapb.validate.file] {
    validate_at_construction: true
  }
  field_transformations: [
    {
      when: {options: {[validate.rules] {message: {required: true}}}}
      set: {
        [scalapb.field] {
          required: true
        }
      }
    }
  ]
  single_file: true
  preamble: [
    "sealed trait OrganizationRequest {\n",
    "  val organizationId: com.improving.app.common.domain.OrganizationId\n"
    "  val onBehalfOf: com.improving.app.common.domain.MemberId\n",
    "}\n",
    "sealed trait OrganizationCommand extends OrganizationRequest\n",
    "sealed trait OrganizationQuery extends OrganizationRequest\n"
  ]
};

message OrganizationRequestPB {
  oneof sealed_value {
    EstablishOrganization establish_organization = 1;
    ActivateOrganization activate_organization = 2;
    SuspendOrganization suspend_organization = 3;
    TerminateOrganization terminate_organization = 4;
    EditOrganizationInfo edit_organization_info = 5;
    AddMembersToOrganization add_members_to_organization = 6;
    RemoveMembersFromOrganization remove_members_from_organization = 7;
    AddOwnersToOrganization add_owners_to_organization = 8;
    RemoveOwnersFromOrganization remove_owners_from_organization = 9;

    GetOrganizationInfo get_organization_info = 10;
  }
}

message EstablishOrganization {
  option (scalapb.message) = {
    extends: [ "OrganizationCommand" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
  com.improving.app.organization.domain.OrganizationInfo organization_info = 3 [(validate.rules).message.required = true];
}

message ActivateOrganization {
  option (scalapb.message) = {
    extends: [ "OrganizationCommand" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
}

message SuspendOrganization {
  option (scalapb.message) = {
    extends: [ "OrganizationCommand" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
}

message TerminateOrganization {
  option (scalapb.message) = {
    extends: [ "OrganizationCommand" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
}

message EditOrganizationInfo {
  option (scalapb.message) = {
    extends: [ "OrganizationCommand" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
  com.improving.app.organization.domain.EditableOrganizationInfo organization_info = 3 [(validate.rules).message.required = true];
}

message AddOwnersToOrganization {
  option (scalapb.message) = {
    extends: [ "OrganizationCommand" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
  repeated com.improving.app.common.domain.MemberId owners_to_add = 3 [(validate.rules).repeated.min_items = 1];
}

message RemoveOwnersFromOrganization {
  option (scalapb.message) = {
    extends: [ "OrganizationCommand" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
  repeated com.improving.app.common.domain.MemberId owners_to_remove = 3 [(validate.rules).repeated.min_items = 1];
}

message AddMembersToOrganization {
  option (scalapb.message) = {
    extends: [ "OrganizationCommand" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
  repeated com.improving.app.common.domain.MemberId members_to_add = 3 [(validate.rules).repeated.min_items = 1];
}

message RemoveMembersFromOrganization {
  option (scalapb.message) = {
    extends: [ "OrganizationCommand" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
  repeated com.improving.app.common.domain.MemberId members_to_remove = 3 [(validate.rules).repeated.min_items = 1];
}

message GetOrganizationInfo {
  option (scalapb.message) = {
    extends: [ "OrganizationQuery" ]
  };
  com.improving.app.common.domain.OrganizationId organization_id = 1 [(validate.rules).message.required = true];
  com.improving.app.common.domain.MemberId on_behalf_of = 2 [(validate.rules).message.required = true];
}
