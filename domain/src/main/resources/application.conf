akka.http.server.preview.enable-http2 = on

app-version = "0.1.7-SNAPSHOT"

akka {
  loglevel = DEBUG

  actor {
    allow-java-serialization = on
    provider = "cluster"
  }

  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    # To make use of default LeastShardAllocationStrategy feature.postgres.postgres
    #   new shards will be allocated to the newest deployed version.
    akka.cluster.app-version = ${app-version}
  }

#   cluster.sharding {
#     # No passivation (for testing rolling update)
#     passivation.strategy = "none"
#   }

  discovery {
    kubernetes-api {
      pod-namespace-path = "nike-inventory-domain"
      pod-namespace = "nike-inventory-domain"
      pod-label-selector = "app=nike-inventory-domain"
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
      }
    }
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }

  http {
    default-host-header = "nike-inventory-domain:8080"
  }
}

jdbc-journal {
  slick = ${slick}
}

jdbc-snapshot-store {
  slick = ${slick}
}

jdbc-read-journal {
  slick = ${slick}
}

# the akka-persistence-jdbc provider in use for durable state store
jdbc-durable-state-store {
  slick = ${slick}
}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql:///inventory-domain?cloudSqlInstance=nike-pov:us-east4:nike-inventory&socketFactory=com.google.cloud.sql.postgres.SocketFactory"
    user = "postgres"
    password = "postgres"
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}

# akka.projection.slick {
#   profile = "slick.jdbc.PostgresProfile$"
#   db {
#     url = "jdbc:postgresql:///inventory-domain?cloudSqlInstance=nike-pov:us-east4:nike-inventory&socketFactory=com.google.cloud.sql.postgres.SocketFactory"
#     user = "postgres"
#     password = "postgres"
#     driver = "org.postgresql.Driver"
#     numThreads = 5
#     maxConnections = 5
#     minConnections = 1
#   }
#   offset-store {
#     # set this to your database schema if applicable, empty by default
#     schema = ""
#     table = "akka_projection_offset_store"
#     management-table = "akka_projection_management"
#     use-lowercase-schema = true
#   }
# }
