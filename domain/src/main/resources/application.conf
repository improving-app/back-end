akka.http.server.preview.enable-http2 = on

app-version = "1.12-SNAPSHOT"

akka {
  loglevel = DEBUG

  actor {
    allow-java-serialization = off
    provider = "cluster"
    serializers {
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = none
      "com.inventory.CborSerializable" = jackson-cbor
      "com.google.protobuf.Message" = proto
    }
  }

  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    # To make use of default LeastShardAllocationStrategy feature.postgres.postgres
    #   new shards will be allocated to the newest deployed version.
    akka.cluster.app-version = ${app-version}
  }

  cluster.sharding {
    # Will also cause non-passivation
    #remember-entities = on

    # No passivation
    passivation.strategy = "none"
  }

  discovery {
    kubernetes-api {
      pod-namespace-path = "inventory-domain"
      pod-namespace = "inventory-domain"
      pod-label-selector = "app=inventory-domain"
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
      }
    }
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }

  http {
    default-host-header = "inventory-domain:8080"
  }
}

jdbc-journal {
  slick = ${slick}
}

jdbc-snapshot-store {
  slick = ${slick}
}

jdbc-read-journal {
  slick = ${slick}
}

# the akka-persistence-jdbc provider in use for durable state store
jdbc-durable-state-store {
  slick = ${slick}
}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql:///postgres?cloudSqlInstance=nike-pov:us-east4:nike1&socketFactory=com.google.cloud.sql.postgres.SocketFactory"
    user = "postgres"
    password = "1-carSrera2@"
    driver = "org.postgresql.Driver"
  }
}

akka.projection.slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql:///postgres?cloudSqlInstance=nike-pov:us-east4:nike1&socketFactory=com.google.cloud.sql.postgres.SocketFactory"
    user = "postgres"
    password = "1-carSrera2@"
    driver = "org.postgresql.Driver"
  }
  offset-store {
    # set this to your database schema if applicable, empty by default
    schema = ""
    table = "akka_projection_offset_store"
    management-table = "akka_projection_management"
    use-lowercase-schema = true
  }
}
