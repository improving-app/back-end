akka.http.server.preview.enable-http2 = on

akka {
  loglevel = DEBUG

  actor {
    allow-java-serialization = on
    provider = "cluster"
    serialization-bindings {
      "com.nike.inventory.CborSerializable" = jackson-cbor
    }
  }

  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  discovery {
    kubernetes-api {
      pod-namespace-path = "default"
      pod-namespace = "nike-inventory"
      pod-label-selector = "app=nike-inventory"
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
      }
    }
    health-checks {
      readiness-checks {
        example-ready = "com.nike.inventory.HealthCheck"
      }
    }
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
    jdbc {
      journal {
        keyspace-autocreate = true
        tables-autocreate = true
      }
      snapshot {
        keyspace-autocreate = true
        tables-autocreate = true
      }
      query {
        refresh-interval = 2s
      }
      events-by-tag {
        # for lower latency
        eventual-consistency-delay = 25ms
        flush-interval = 25ms
        pubsub-notification = on
      }
    }
  }
}

jdbc-journal {
  slick = ${slick}
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  slick = ${slick}
}

# the akka-persistence-jdbc provider in use for durable state store
jdbc-durable-state-store {
  slick = ${slick}
}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql:///inventory?cloudSqlInstance=nike-pov:us-east4:nike-inventory&socketFactory=com.google.cloud.sql.postgres.SocketFactory"
    user = "postgres"
    password = "postgres"
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}

akka.projection.slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql:///inventory?cloudSqlInstance=nike-pov:us-east4:nike-inventory&socketFactory=com.google.cloud.sql.postgres.SocketFactory"
    user = "postgres"
    password = "postgres"
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
  offset-store {
    # set this to your database schema if applicable, empty by default
    schema = ""
    table = "akka_projection_offset_store"
    management-table = "akka_projection_management"
    use-lowercase-schema = true
  }
}
